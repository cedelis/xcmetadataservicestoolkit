<!--
  * Copyright (c) 2009 University of Rochester
  *
  * This program is free software; you can redistribute it and/or modify it under the terms of the MIT/X11 license. The text of the
  * license can be found at http://www.opensource.org/licenses/mit-license.php and copy of the license can be found on the project
  * website http://www.extensiblecatalog.org/.
  *
  -->
<project name="mc" default="help" xmlns:ivy="antlib:org.apache.ivy.ant">

	<dirname property="mc.dir" file="${ant.file.mc}" />
	
	<property file="${mc.dir}/build.properties" />

	<path id="mc.classpath.compile">
		<fileset dir="${mc.build.lib}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="mc.classpath.test.compile">
		<fileset dir="${mc.build.lib}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${mc.build.classes}" />
	</path>

	<path id="mc.classpath.test.run">
		<fileset dir="${mc.build.lib}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${mc.build.classes}" />
		<pathelement path="${mc.build.test.classes}" />
	</path>

	<target name="mc.clean">
		<delete dir="${mc.build.dir}" />
	</target>

	<target name="mc.help">
		<echo>
			mst-common help
			mc.src.dir: ${mc.src.dir}
			mc.src.java: ${mc.src.java}
			mc.build.dir: ${mc.build.dir}
			mc.build.ivy.report: ${mc.build.ivy.report}
		</echo>
	</target>

	<target name="mc.init" depends="init">
		<mkdir dir="${mc.build.test.classes}" />
		<mkdir dir="${mc.build.classes}" />
		<mkdir dir="${mc.build.lib}" />
	</target>

	<target name="mc.resolve" depends="mc.init">
		<ivy:resolve file="${mc.dir}/ivy.xml"/>
	</target>

	<target name="mc.ivy-report" depends="mc.resolve"
			description="--> report the resolve actions">
		<mkdir dir="${mc.build.ivy.report}" />
		<ivy:report todir="${mc.build.ivy.report}" />
	</target>

	<target name="mc.retrieve" depends="mc.ivy-report">
		<ivy:retrieve sync="true" pattern="${mc.build.lib}/[artifact]-[revision].[ext]"/>
	</target>

	<target name="mc.compile" depends="mc.retrieve, mc.compile.nodep" />

	<target name="mc.compile.nodep" depends="init">
		<javac srcdir="${mc.src.dir}"
			destdir="${mc.build.classes}"
			classpathref="mc.classpath.compile"
			debug="on"
			deprecation="on"
			debuglevel="lines,vars,source"/>
	</target>

	<target name="mc.copy-resources" depends="mc.compile, mc.copy-resources.nodep" />

	<target name="mc.copy-resources.nodep" depends="mc.compile.nodep">
		<copy todir="${mc.build.classes}">
			<fileset dir="${mc.src.java}">
				<include name="default.properties" />
				<include name="*.xml" />
				<!--
				<exclude name="**/*.java" />
				<exclude name="*.properties" />
				-->
			</fileset>
		</copy>
		<copy tofile="${mc.build.classes}/env.properties" file="${mc.src.java}/${box}.properties" overwrite="true" />
	</target>

	<target name="mc.jar" depends="mc.copy-resources, mc.copy-resources.nodep"/>

	<target name="mc.jar.nodep" depends="mc.copy-resources.nodep">
		<jar destfile="${mc.build.dir}/${mc.project-name}-${mc.version}.jar"
			basedir="${mc.build.classes}" />
	</target>

	<target name="mc.publish" depends="mc.jar, mc.publish.nodep"/>

	<target name="mc.publish.nodep" depends="mc.jar.nodep">
		<ivy:publish resolver="local" pubrevision="${mc.version}" overwrite="true" update="true" forcedeliver="true">
			<artifacts pattern="${mc.build.dir}/${mc.project-name}-${mc.version}.[ext]" />
		</ivy:publish>
	</target>

	<target name="mc.deploy" depends="mc.jar.nodep">
		<copy todir="${tomcat.dir}/webapps/${mp.project-name}/WEB-INF/lib" 
			file="${mc.build.dir}/${mc.project-name}-${mc.version}.jar" />
	</target>

	<target name="mc.compile.test" depends="mc.compile.nodep">
		<javac srcdir="${mc.test.dir}"
			destdir="${mc.build.test.classes}"
			classpathref="mc.classpath.test.compile"
			debug="on"
			deprecation="on"
			debuglevel="lines,vars,source"/>
	</target>

	<target name="init.test" unless="${test}">
		<property name="test" value="" />
	</target>

	<target name="mc.test" depends="mc.compile.test, init.test">
		<taskdef name="testng" classpathref="mc.classpath.compile"
			classname="org.testng.TestNGAntTask" />

		<testng classpathref="mc.classpath.test.run">
			<classfileset dir="${mc.build.test.classes}" includes="**/${test}*.class"/>
		</testng>
	</target>

</project>
