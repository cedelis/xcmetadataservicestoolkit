<!--
  * Copyright (c) 2009 University of Rochester
  *
  * This program is free software; you can redistribute it and/or modify it under the terms of the MIT/X11 license. The text of the
  * license can be found at http://www.opensource.org/licenses/mit-license.php and copy of the license can be found on the project
  * website http://www.extensiblecatalog.org/.
  *
  -->
<project name="example-service" default="help" xmlns:ivy="antlib:org.apache.ivy.ant">

	<import file="build-custom.xml" />
	<property file="custom.properties" />
	<property file="build.properties" />

	<target name="init">
		<mkdir dir="${build.test.classes}" />
		<mkdir dir="${build.test.actual-output-records}" />
		<mkdir dir="${build.classes.services}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${build.zip.lib}" />
		<mkdir dir="${ivy.dir}" />
	</target>

	<target name="download-ivy" unless="skip.download" depends="init">
		<mkdir dir="${ivy.dir}" />
		<!--  download Ivy from web site so that it can be used
				even without any special installation -->
		<echo message="Please wait this may take a few minutes - installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
			dest="${ivy.jar}" usetimestamp="true" />
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
				uri="antlib:org.apache.ivy.ant"
				classpathref="ivy.lib.path" />
	</target>

	<!--  =================================
		  target: install-ivy
		 
		  this target is not necessary if you put ivy.jar in your ant lib directory
		  if you already have ivy in your ant lib, you can simply remove this
		  target and the dependency the 'go' target has on it
		 =================================
	-->

	<!-- clean the ivy cache -->
	<target name="clean-cache" depends="download-ivy"
	   description="--> clean the ivy cache">
	   <ivy:cleancache />
	</target>

	<path id="ivy.lib.path">
		 <fileset dir="ivy" includes="*.jar" />
	</path>

	<path id="classpath.compile">
		<fileset dir="${build.lib}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="classpath.test.compile">
		<fileset dir="${build.lib}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.classes}" />
	</path>

	<path id="classpath.test.run">
		<fileset dir="${build.lib}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.test.classes}" />
	</path>

	<target name="echo.path">
		<property name="classpath.test.run.str" refid="classpath.test.run" />
		<echo>classpath.test.run.str: ${classpath.test.run.str}</echo>
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="help">
		<echo>
			help
		</echo>
	</target>

	<target name="resolve" depends="download-ivy">
		<ivy:resolve file="ivy.xml"/>
	</target>

	<target name="ivy-report" depends="resolve">
		<mkdir dir="${build.ivy.report}" />
		<ivy:report todir="${build.ivy.report}" />
	</target>

	<target name="retrieve" depends="ivy-report">
		<ivy:retrieve sync="true" pattern="${build.lib}/[artifact]-[revision].[ext]"/>
	</target>

	<target name="compile" depends="retrieve, compile.nodep" />

	<target name="compile.nodep" depends="init">
		<javac srcdir="${src.dir}"
			destdir="${build.classes}"
			classpathref="classpath.compile"
			debug="on"
			deprecation="on"
			debuglevel="lines,vars,source"/>
	</target>

	<target name="copy-resources" depends="copy-custom-libs, compile, copy-resources.nodep" />

	<target name="copy-resources.nodep" depends="compile.nodep">
		<copy todir="${build.classes}">
			<fileset dir="${src.java}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${build.zip}">
			<fileset dir=".">
				<include name="errors/**/*" />
			</fileset>
		</copy>
		<copy todir="${build.zip}">
			<fileset dir=".">
				<include name="sql/**/*.sql" />
			</fileset>
		</copy>
		<copy todir="${build.classes.services}">
			<fileset dir="conf">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</copy>
		<copy todir="${build.mst-instance.dir}" overwrite="true">
			<fileset dir="conf">
				<include name="**/log4j.config.txt" />
			</fileset>
		</copy>
		<copy todir="${build.classes.services}" file="custom.properties" />
		<copy tofile="${build.mst-instance.dir}/install.properties" 
			file="custom.properties" overwrite="true"/>
	</target>

	<target name="jar" depends="copy-resources, jar.nodep" />

	<target name="jar.nodep" depends="copy-resources.nodep">
		<jar destfile="${build.dir}/${service.name}-${service.version}.jar"
			basedir="${build.classes}" />
	</target>

	<target name="zip" depends="jar, zip.nodep" />
	<target name="zip.nodep" depends="jar.nodep">
		<zip destfile="${build.dir}/${service.name}-${service.version}.zip">
			<zipfileset  dir="${build.zip}" prefix="${service.name}"/>
		</zip>
	</target>

	<target name="zip-dev-env">
		<zip destfile="${build.dir}/${service.name}-${service.version}-dev-env.zip">
			<zipfileset  dir="." >
				<exclude name="build" />
				<exclude name="build/**/*" />
				<exclude name="bin" />
				<exclude name="bin/**/*" />
				<exclude name="ivy" />
				<exclude name="ivy/**/*" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</zipfileset>
		</zip>
	</target>

	<target name="compile.test" depends="copy-resources.nodep">
		<javac srcdir="${test.java}"
			destdir="${build.test.classes}"
			classpathref="classpath.test.compile"
			debug="on"
			deprecation="on"
			debuglevel="lines,vars,source"/>
	</target>

	<target name="init.test" unless="${test}">
		<property name="test" value="" />
	</target>

	<target name="install-mst">
		<delete dir="${build.mst-instances.dir}" />
		<unzip src="${build.lib}/MST-instances-${mst-instances.version}.jar"
			dest="${build.dir}" />
		<sql classpathref="classpath.compile"
				driver="com.mysql.jdbc.Driver"
				url="${DatabaseUrl}"
				userid="${DatabaseUsername}"
				password="${DatabasePassword}">
			<path>
				<fileset dir="${build.mst-instance.dir}/sql">
					<include name="create_database_script.sql"/>
				</fileset>
			</path>
		</sql>
	</target>

	<target name="testy">
		<echo>
			test.folder: ${test.folder}
			test.file: ${test.file}
		</echo>
	</target>

	<target name="unzip-base-tests">
		<echo>build.test.classes: ${build.test.classes}</echo>
		<unzip dest="${build.test.classes}">
			<fileset dir="${build.lib}">
				<include name="**/mst-service-impl-*.jar"/>
			</fileset>
		</unzip>
		<delete>
			<!-- change the name from service to services -->
			<fileset dir="${build.test.classes}/xc/mst/service/impl/test">
				<exclude name="**/ProcessFilesTest.class" />
			</fileset>
			<fileset dir="${build.test.classes}/xc/mst/services/impl" />
		</delete>
	</target>

	<target name="test" depends="install-mst, init.test, compile.test, unzip-base-tests, test.nodep" />
	<target name="test.nodep">
		<property name="abs.build.dir" location="${build.dir}" />
		<exec executable="${ant.executable}">
			<arg value="-Dtest=${test}" />
			<arg value="test.internal" />
			<env key="MST_ROOT_DIR" value="${abs.build.dir}/" />
			<env key="MST_SERVICE_TEST_FOLDER" value="${test.folder}" />
		</exec>
	</target>

	<target name="test.internal">
		<taskdef name="testng" classpathref="classpath.compile"
			classname="org.testng.TestNGAntTask" />

		<testng classpathref="classpath.test.run" outputdir="${build.test}">
			<classfileset dir="${build.test.classes}" includes="**/*${test}*.class"/>
		</testng>
	</target>

</project>

