<!--
  * Copyright (c) 2009 University of Rochester
  *
  * This program is free software; you can redistribute it and/or modify it under the terms of the MIT/X11 license. The text of the
  * license can be found at http://www.opensource.org/licenses/mit-license.php and copy of the license can be found on the project
  * website http://www.extensiblecatalog.org/.
  *
  -->
<project name="example-service" default="help" xmlns:ivy="antlib:org.apache.ivy.ant">

	<import file="build-custom.xml" />
	<property file="custom.properties" />
    <scriptdef name="normalize" language="javascript">
        <attribute name="property"/>
        <attribute name="value"/>
        project.setNewProperty(attributes.get("property"),
			attributes.get("value").toLowerCase().replaceAll(" ", "_"));
    </scriptdef>
    <normalize property="normalized.service.name" value="${service.name}"/>
	<property file="build.properties" />

	<target name="echo.normalized.service.name"> 
		<echo>normalized.service.name: ${normalized.service.name}</echo>
	</target>

	<target name="init">
		<mkdir dir="${build.test.classes}" />
		<mkdir dir="${build.test.actual-output-records}" />
		<mkdir dir="${build.test.mock-harvest-actual-output}" />
		<mkdir dir="${build.classes.services}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${build.zip.lib}" />
		<mkdir dir="${ivy.dir}" />
	</target>

	<target name="check.skip.download">
		<available property="skip.download" file="${ivy.jar}" />
	</target>

	<target name="ivy.download" unless="skip.download" depends="init, check.skip.download">
		<mkdir dir="${ivy.dir}" />
		<!--  download Ivy from web site so that it can be used
				even without any special installation -->
		<echo message="Please wait this may take a few minutes - installing ivy..." />
		<delete>
			<fileset dir="${ivy.dir}" includes="*.jar"/>
		</delete>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
			dest="${ivy.jar}" usetimestamp="true" />
	</target>

	<target name="ivy.init" depends="ivy.download">
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
				uri="antlib:org.apache.ivy.ant"
				classpathref="ivy.lib.path" />
	</target>

	<!--  =================================
		  target: install-ivy
		 
		  this target is not necessary if you put ivy.jar in your ant lib directory
		  if you already have ivy in your ant lib, you can simply remove this
		  target and the dependency the 'go' target has on it
		 =================================
	-->

	<target name="doc" depends="compile">
		<javadoc
			destdir="${build.doc}/api"
			author="true"
			version="true"
			use="true"
			windowtitle="eXtensinble Catalog">

			<fileset dir="${src.dir}" defaultexcludes="yes">
				<include name="**"/>
			</fileset>

			<doctitle><![CDATA[<h1>eXtensible Catalog</h1>]]></doctitle>
		    <bottom>
			<![CDATA[<i>Copyright &#169; 2006 University of Rochester Libraries</i>]]></bottom>
	       <tag name="todo" scope="all" description="To do:"/>
	       <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
		
	</target>

	<!-- clean the ivy cache -->
	<target name="clean-cache" depends="ivy.init"
	   description="--> clean the ivy cache">
	   <ivy:cleancache />
	</target>

	<path id="ivy.lib.path">
		 <fileset dir="ivy" includes="*.jar" />
	</path>

	<path id="classpath.mst">
		<fileset dir="${build.lib}">
			<include name="*.jar" />
			<exclude name="mst-service*" />
		</fileset>
	</path>

	<path id="classpath.compile">
		<fileset dir="${build.lib}">
			<include name="*.jar" />
			<exclude name="mst-service*" />
		</fileset>
		<fileset dir="${build.zip.lib}">
			<include name="*.jar" />
		</fileset>
	</path>

	<path id="classpath.test.compile">
		<fileset dir="${build.lib}">
			<include name="*.jar" />
			<exclude name="mst-service*" />
		</fileset>
		<fileset dir="${build.zip.lib}">
			<include name="*.jar" />
		</fileset>
		<pathelement path="${build.classes}" />
	</path>

	<path id="classpath.test.run">
		<fileset dir="${build.lib}">
			<include name="*.jar" />
			<exclude name="mst-service*" />
		</fileset>
		<!--
		<pathelement path="${build.test.classes}" />
		-->
	</path>

	<target name="echo.path">
		<property name="classpath.test.run.str" refid="classpath.test.run" />
		<echo>classpath.test.run.str: ${classpath.test.run.str}</echo>
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<target name="clean.classes">
		<delete dir="${build.classes}" />
		<delete dir="${build.test.classes}" />
	</target>

	<target name="help">
		<echo>
			help
		</echo>
	</target>

	<target name="resolve" depends="ivy.init">
		<ivy:resolve file="ivy.xml"/>
	</target>

	<target name="ivy-report" depends="resolve">
		<mkdir dir="${build.ivy.report}" />
		<ivy:report todir="${build.ivy.report}" />
	</target>

	<target name="retrieve" depends="ivy-report">
		<ivy:retrieve sync="true" pattern="${build.lib}/[artifact]-[revision].[ext]"/>
		<copy todir="${build.zip.lib}" overwrite="true">
			<fileset dir="${build.lib}">
				<include name="mst-service-impl*.jar" />
				<!--
				anything jars you've added in your ivy-custom.xml should be included in the zip
				all the other jars are already loaded into the mst-platform
				<include name="" />
				-->
			</fileset>
		</copy>
		<delete>
			<fileset dir="${build.lib}" includes="mst-service*" />
		</delete>
	</target>

	<target name="compile" depends="retrieve, compile.nodep"/>
	<target name="compile.nodep" depends="init">
		<javac srcdir="${src.dir}"
			destdir="${build.classes}"
			classpathref="classpath.compile"
			debug="on"
			deprecation="on"
			debuglevel="lines,vars,source">
			<!--
			<classpath id="classpath.compile">
				<fileset dir="${build.lib}">
					<include name="*.jar" />
					<exclude name="mst-service*" />
				</fileset>
				<fileset dir="${build.zip.lib}">
					<include name="*.jar" />
				</fileset>
			</classpath>
			-->
		</javac>
	</target>

	<target name="copy-resources" depends="copy-custom-libs, compile, copy-resources.nodep" />

	<target name="copy-resources.nodep" depends="compile.nodep">
		<copy todir="${build.classes}">
			<fileset dir="${src.java}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy todir="${build.zip}">
			<fileset dir=".">
				<include name="errors/**/*" />
			</fileset>
		</copy>
		<copy todir="${build.zip}">
			<fileset dir=".">
				<include name="sql/**/*.sql" />
			</fileset>
		</copy>
		<copy todir="${build.classes.services}">
			<fileset dir="conf">
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</copy>
		<copy todir="${build.mst-instance.dir}" overwrite="true">
			<fileset dir="conf">
				<include name="**/log4j.config.txt" />
			</fileset>
		</copy>
		<copy todir="${build.classes.services}" file="custom.properties" />
		<copy tofile="${build.mst-instance.dir}/install.properties" 
			file="custom.properties" overwrite="true"/>
	</target>

	<target name="jar" depends="copy-resources, jar.nodep" />

	<target name="jar.nodep" depends="copy-resources.nodep">
		<jar destfile="${build.dir}/${normalized.service.name}-${service.version}.jar"
			basedir="${build.classes}" />
	</target>

	<target name="zip" depends="jar, zip.nodep" />
	<target name="zip.nodep" depends="jar.nodep">
		<zip destfile="${build.dir}/${normalized.service.name}-${service.version}.zip">
			<zipfileset  dir="${build.zip}" prefix="${normalized.service.name}"/>
		</zip>
	</target>

	<target name="zip-dev-env">
		<zip destfile="${build.dir}/${normalized.service.name}-${service.version}-dev-env.zip">
			<zipfileset  dir="." prefix="${normalized.service.name}">
				<exclude name="build" />
				<exclude name="build/**/*" />
				<exclude name="bin" />
				<exclude name="bin/**/*" />
				<exclude name="ivy" />
				<exclude name="ivy/**/*" />
				<exclude name=".classpath" />
				<exclude name=".project" />
			</zipfileset>
		</zip>
	</target>

	<target name="compile.test" depends="copy-resources" />
	<target name="compile.test.nodep" depends="copy-resources.nodep">
		<javac srcdir="${test.java}"
			destdir="${build.test.classes}"
			classpathref="classpath.test.compile"
			debug="on"
			deprecation="on"
			debuglevel="lines,vars,source"/>
	</target>

	<target name="init.test" unless="test">
		<property name="test" value="" />
	</target>

	<target name="init.skip.mst.install" unless="skip.mst.install">
		<property name="skip.mst.install" value="" />
	</target>

	<target name="install.dependent.service" if="dependent.service">
		<echo>../${dependent.service}/build</echo>
		<unzip dest="${build.mst-services.dir}">
			<fileset dir="../${dependent.service}/build">
				<include name="*.zip"/>
			</fileset>
		</unzip>
	</target>

	<target name="install-mst" depends="unzip-mst, mst-sql" />

	<target name="unzip-mst">
		<delete dir="${build.mst-instances.dir}" />
		<unzip src="${build.lib}/mst-instances-${mst-instances.version}.jar"
			dest="${build.dir}" />
	</target>

	<target name="mst-sql">
		<exec executable="${mysql.home}/bin/mysql" 
				input="${build.mst-instance.dir}/sql/create_database_script.sql">
			<arg line="-u ${DatabaseUsername} --password=${DatabasePassword}" />
		</exec>
	</target>

	<target name="unzip-base-tests">
		<echo>build.test.classes: ${build.test.classes}</echo>
		<unzip dest="${build.test.classes}">
			<fileset dir="${build.zip.lib}">
				<include name="**/mst-service-impl-*.jar"/>
			</fileset>
		</unzip>
		<delete>
			<fileset dir="${build.test.classes}/xc/mst/service/impl/test">
				<exclude name="**/ProcessFilesTest.class" />
			</fileset>
			<fileset dir="${build.test.classes}/xc/mst/services/impl" />
		</delete>
	</target>

	<target name="test" depends="install-mst, install.dependent.service, compile.test, test.nodep" />
	<target name="test.nodep" depends="init.test, init.skip.mst.install, unzip-base-tests, compile.test.nodep">
		<java classpathref="classpath.test.run" 
				classname="xc.mst.services.test.MetadataServiceSpecificTest"
				fork="true" 
				dir="${build.dir}" >
			<env key="service.name" value="${normalized.service.name}"/>
			<env key="service.test" value="${test}"/>
			<env key="test.folder" value="${test.folder}"/>
			<env key="skip.mst.install" value="${skip.mst.install}"/>
			<env key="still.install.service" value="${still.install.service}"/>
			<jvmarg value="-server" />
			<jvmarg value="-Xms${test.memory}" />
			<jvmarg value="-Xmx${test.memory}" />
		</java>
	</target>

	<target name="test.internals" depends="install-mst, compile.test, test.internals.nodep" />
	<target name="test.internals.nodep" depends="init.test, compile.test.nodep">
		<java classpathref="classpath.test.run" 
				classname="xc.mst.services.test.MetadataServiceSpecificTest"
				fork="true" 
				dir="${build.dir}" >
			<env key="service.name" value="${normalized.service.name}"/>
		</java>
	</target>

	<target name="start2finishtest">
		<property name="test" value="StartToFinishTest" />
		<ant target="test" inheritAll="true" />
	</target>

	<target name="start2finishtest.nodep">
		<property name="test" value="StartToFinishTest" />
		<ant target="test.nodep" inheritAll="true" />
	</target>

</project>

